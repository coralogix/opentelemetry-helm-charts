{{- if (and (.Values.presets.fleetManagement.enabled) (.Values.presets.fleetManagement.supervisor.enabled)) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "opentelemetry-collector.fullname" . }}-supervisor
  namespace: {{ template "opentelemetry-collector.namespace" . }}
  labels:
    {{- include "opentelemetry-collector.labels" . | nindent 4 }}
data:
  supervisor.yaml: |
    server:
      endpoint: "https://ingress.{{.Values.global.domain}}/opamp/v1"
      headers:
        Authorization: "Bearer ${env:CORALOGIX_PRIVATE_KEY}"

    capabilities:
      reports_effective_config: true
      reports_own_metrics: true
      reports_own_logs: true
      reports_own_traces: true
      reports_health: true
      accepts_remote_config: true
      reports_remote_config: true

    agent:
      executable: /otelcol-contrib
      passthrough_logs: true

      # This passes config files to the Collector.
      config_files:
        - /etc/otelcol-contrib/config.yaml

      # This adds CLI arguments to the Collector.
      args: []

      # This adds env vars to the Collector process.
      env: {}

      description:
        non_identifying_attributes:
        {{- if .Values.presets.fleetManagement.agentType }}
          cx.agent.type: "{{.Values.presets.fleetManagement.agentType}}"
        {{- end }}
        {{- if .Values.presets.fleetManagement.clusterName }}
          cx.cluster.name: "{{.Values.presets.fleetManagement.clusterName}}"
        {{- end }}
        {{- if .Values.presets.fleetManagement.integrationID }}
          cx.integrationID: "{{.Values.presets.fleetManagement.integrationID}}"
        {{- end }}
          k8s.node.name: ${env:KUBE_NODE_NAME}

    # The storage can be used for many things:
    # - It stores configuration sent by the OpAMP server so that new collector
    #   processes can start with the most known desired config.
    storage:
      directory: /etc/otelcol-contrib/supervisor-data/

    telemetry:
      logs:
        level: debug
{{- end }}