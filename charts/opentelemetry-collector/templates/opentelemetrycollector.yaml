{{- if .Values.collectorCRD.generate -}}
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: {{ include "opentelemetry-collector.fullname" . }}
  labels:
    {{- include "opentelemetry-collector.labels" . | nindent 4 }}
  {{- if .Values.annotations }}
  annotations:
    {{- range $key, $value := .Values.annotations }}
    {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
    {{- end }}
  {{- end }}
spec:
  mode: {{ .Values.mode }}
  {{- if .Values.collectorCRD.updateStrategy }}
  updateStrategy: {{ .Values.collectorCRD.updateStrategy | quote }}
  {{- end }}
  {{- if .Values.targetAllocator.enabled }}
  targetAllocator:
    enabled: {{ .Values.targetAllocator.enabled }}
    {{- if .Values.targetAllocator.prometheusCR.enabled }}
    prometheusCR:
      enabled: true
      {{- if .Values.targetAllocator.prometheusCR.podMonitorSelector }}
      podMonitorSelector:
        {{- include "opentelemetry-target-allocator.podMonitorSelector" . | nindent 8 }}
      {{- end }}
      {{- if .Values.targetAllocator.prometheusCR.serviceMonitorSelector }}
      serviceMonitorSelector:
        {{- include "opentelemetry-target-allocator.serviceMonitorSelector" . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if .Values.targetAllocator.allocationStrategy }}
    allocationStrategy: {{ .Values.targetAllocator.allocationStrategy | quote }}
    {{- end }}
    {{- if .Values.targetAllocator.serviceAccount }}
    serviceAccount: {{ .Values.targetAllocator.serviceAccount | quote }}
    {{- else }}
    serviceAccount: {{ include "opentelemetry-collector.serviceAccountName" . }}-targetallocator
    {{- end }}
    {{- if .Values.targetAllocator.image.tag }}
    image: "{{ .Values.targetAllocator.image.repository }}:{{ .Values.targetAllocator.image.tag | default .Chart.AppVersion }}"
    {{- else if .Values.targetAllocator.image.digest}}
    image: "{{ .Values.targetAllocator.image.repository }}@{{ .Values.targetAllocator.image.digest }}"
    {{- end }}
    {{- with .Values.targetAllocator.resources }}
    resources:
      {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- end }}
  {{- if .Values.podAnnotations }}
  podAnnotations:
    {{- include "opentelemetry-collector.podAnnotations" . | nindent 8 }}
  {{- end }}
  {{- if and (not (.Values.securityContext)) (not (.Values.isWindows)) (or (.Values.presets.logsCollection.storeCheckpoints) (.Values.presets.hostMetrics.process.enabled)) }}
  podSecurityContext:
    runAsUser: 0
    runAsGroup: 0
  {{- if .Values.presets.hostMetrics.process.enabled }}
    privileged: true
  {{- end }}
  {{- else -}}
    {{- if .Values.securityContext }}
    {{- toYaml .Values.securityContext | nindent 6 }}
    {{- end }}
  {{- end }}
  {{- if .Values.image.digest }}
  image: "{{ .Values.image.repository }}@{{ .Values.image.digest }}"
  {{- else }}
  image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
  {{- end }}
  imagePullPolicy: {{ .Values.image.pullPolicy }}
  ports:
    {{- range $key, $port := .Values.ports }}
    {{- if $port.enabled }}
    - name: {{ $key }}
      port: {{ $port.containerPort }}
      protocol: {{ $port.protocol }}
    {{- end }}
    {{- end }}
  env:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    {{- if .Values.targetAllocator.enabled }}
    - name: MY_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    {{- end }}
    {{- if and .Values.presets.kubernetesAttributes.enabled (eq .Values.mode "daemonset") }}
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    {{- end }}
    {{- if .Values.presets.kubeletMetrics.enabled }}
    - name: K8S_NODE_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.hostIP
    {{- end }}
    {{- if and (.Values.useGOMEMLIMIT) ((((.Values.resources).limits).memory))  }}
    - name: GOMEMLIMIT
      value: {{ include "opentelemetry-collector.gomemlimit" .Values.resources.limits.memory | quote }}
    {{- end }}
    {{- if .Values.extraEnvs }}
    {{- toYaml .Values.extraEnvs | nindent 4 }}
    {{- end }}
  {{- if .Values.lifecycleHooks }}
  lifecycle:
    {{- toYaml .Values.lifecycleHooks | nindent 4 }}
  {{- end }}
  {{- with .Values.resources }}
  resources:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  volumeMounts:
    {{- range .Values.extraConfigMapMounts }}
    - name: {{ .name }}
      mountPath: {{ .mountPath }}
      readOnly: {{ .readOnly }}
      {{- if .subPath }}
      subPath: {{ .subPath }}
      {{- end }}
    {{- end }}
    {{- range .Values.extraHostPathMounts }}
    - name: {{ .name }}
      mountPath: {{ .mountPath }}
      readOnly: {{ .readOnly }}
      {{- if .mountPropagation }}
      mountPropagation: {{ .mountPropagation }}
      {{- end }}
    {{- end }}
    {{- range .Values.secretMounts }}
    - name: {{ .name }}
      mountPath: {{ .mountPath }}
      readOnly: {{ .readOnly }}
      {{- if .subPath }}
      subPath: {{ .subPath }}
      {{- end }}
    {{- end }}
    {{- if .Values.presets.logsCollection.enabled }}
    - name: varlogpods
      mountPath: /var/log/pods
      readOnly: true
    - name: varlibdockercontainers
      mountPath: /var/lib/docker/containers
      readOnly: true
    {{- if .Values.presets.logsCollection.storeCheckpoints}}
    - name: varlibotelcol
      mountPath: /var/lib/otelcol
    {{- end }}
    {{- end }}
    {{- if .Values.presets.hostMetrics.enabled }}
    - name: hostfs
      mountPath: /hostfs
      readOnly: true
      mountPropagation: HostToContainer
    {{- end }}
    {{- if .Values.extraVolumeMounts }}
    {{- toYaml .Values.extraVolumeMounts | nindent 4 }}
    {{- end }}
  volumes:
  {{- range .Values.extraConfigMapMounts }}
    - name: {{ .name }}
      configMap:
        name: {{ .configMap }}
    {{- end }}
    {{- range .Values.extraHostPathMounts }}
    - name: {{ .name }}
      hostPath:
        path: {{ .hostPath }}
    {{- end }}
    {{- range .Values.secretMounts }}
    - name: {{ .name }}
      secret:
        secretName: {{ .secretName }}
    {{- end }}
    {{- if .Values.presets.logsCollection.enabled  }}
    - name: varlogpods
      hostPath:
        path: /var/log/pods
    {{- if .Values.presets.logsCollection.storeCheckpoints}}
    - name: varlibotelcol
      hostPath:
        path: /var/lib/otelcol
        type: DirectoryOrCreate
    {{- end }}
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
    {{- end }}
    {{- if .Values.presets.hostMetrics.enabled }}
    - name: hostfs
      hostPath:
        path: /
    {{- end }}
    {{- if .Values.extraVolumes }}
    {{- toYaml .Values.extraVolumes | nindent 4 }}
    {{- end }}
  {{- with .Values.nodeSelector }}
  nodeSelector:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.affinity }}
  affinity:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.tolerations }}
  tolerations:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  serviceAccount: {{ include "opentelemetry-collector.serviceAccountName" . }}
  hostNetwork: {{ .Values.hostNetwork }}
  config:
  {{- if or (eq .Values.mode "deployment") (eq .Values.mode "statefulset")  -}}
  {{- include "opentelemetry-collector.deploymentConfig" . | nindent 4 -}}
  {{- else if eq .Values.mode "daemonset" -}}
  {{- include "opentelemetry-collector.daemonsetConfig" . | nindent 4 -}}
  {{- end }}
{{- end }}
