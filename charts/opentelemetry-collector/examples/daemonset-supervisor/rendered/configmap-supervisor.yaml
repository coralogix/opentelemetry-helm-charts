---
# Source: opentelemetry-collector/templates/configmap-supervisor.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-opentelemetry-collector-supervisor
  namespace: default
  labels:
    helm.sh/chart: opentelemetry-collector-0.118.18
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "0.130.1"
    app.kubernetes.io/managed-by: Helm
    
data:
  supervisor.yaml: |
    server:
      endpoint: "https://ingress.eu2.coralogix.com/opamp/v1"
      headers:
        Authorization: "Bearer ${env:CORALOGIX_PRIVATE_KEY}"

    capabilities:
      reports_effective_config: true
      reports_own_metrics: true
      reports_own_logs: true
      reports_own_traces: true
      reports_health: true
      accepts_remote_config: true
      reports_remote_config: true

    agent:
      executable: /otelcol-contrib
      passthrough_logs: true
      # This passes config files to the Collector.
      config_files:
      - /conf/relay.yaml

      # This adds CLI arguments to the Collector.
      args: []

      # This adds env vars to the Collector process.
      env: {}

      description:
        non_identifying_attributes:
          k8s.daemonset.name: "example-opentelemetry-collector"
          k8s.namespace.name: "default"
          k8s.node.name: ${env:KUBE_NODE_NAME}
          k8s.pod.name: ${env:KUBE_POD_NAME}
          
          cx.agent.type: "agent"

    # The storage can be used for many things:
    # - It stores configuration sent by the OpAMP server so that new collector
    #   processes can start with the most known desired config.
    storage:
      directory: /etc/otelcol-contrib/supervisor-data/

    telemetry:
      logs:
        level: info
