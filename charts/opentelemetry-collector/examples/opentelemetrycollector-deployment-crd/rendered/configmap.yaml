---
# Source: opentelemetry-collector/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-opentelemetry-collector
  namespace: default
  labels:
    helm.sh/chart: opentelemetry-collector-0.121.2
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "0.137.0"
    app.kubernetes.io/managed-by: Helm
    
data:
  relay: |
    connectors:
      forward/compact: {}
      forward/db: {}
      spanmetrics:
        aggregation_cardinality_limit: 100000
        dimensions:
        - name: http.method
        - name: cgx.transaction
        - name: cgx.transaction.root
        - name: status_code
        - name: db.namespace
        - name: db.operation.name
        - name: db.collection.name
        - name: db.system
        - name: http.response.status_code
        - name: rpc.grpc.status_code
        - name: service.version
        histogram:
          explicit:
            buckets:
            - 1ms
            - 4ms
            - 10ms
            - 20ms
            - 50ms
            - 100ms
            - 200ms
            - 500ms
            - 1s
            - 2s
            - 5s
        metrics_expiration: 0
        metrics_flush_interval: 15s
        namespace: ""
      spanmetrics/compact:
        aggregation_cardinality_limit: 100000
        exclude_dimensions:
        - span.name
        histogram:
          explicit:
            buckets:
            - 1ms
            - 4ms
            - 10ms
            - 20ms
            - 50ms
            - 100ms
            - 200ms
            - 500ms
            - 1s
            - 2s
            - 5s
        metrics_expiration: 0
        metrics_flush_interval: 15s
        namespace: compact
      spanmetrics/db:
        aggregation_cardinality_limit: 100000
        dimensions:
        - name: db.namespace
        - name: db.operation.name
        - name: db.collection.name
        - name: db.system
        - name: service.version
        histogram:
          explicit:
            buckets:
            - 100us
            - 1ms
            - 2ms
            - 2.5ms
            - 4ms
            - 6ms
            - 10ms
            - 100ms
            - 250ms
        metrics_expiration: 0
        metrics_flush_interval: 15s
        namespace: db
    exporters:
      debug: {}
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    processors:
      filter/db_spanmetrics:
        traces:
          span:
          - attributes["db.system"] == nil
      filter/drop_histogram:
        metrics:
          metric:
          - name == "compact.duration"
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      transform/compact:
        trace_statements:
        - context: resource
          statements:
          - keep_keys(attributes, ["service.name", "k8s.cluster.name", "host.name"])
      transform/compact_histogram:
        metric_statements:
        - context: metric
          statements:
          - extract_sum_metric(false, ".sum") where name == "compact.duration"
          - extract_count_metric(false, ".count") where name == "compact.duration"
          - set(unit, "") where name == "compact.duration.sum"
          - set(unit, "") where name == "compact.duration.count"
      transform/prometheus:
        error_mode: ignore
        metric_statements:
        - context: metric
          statements:
          - replace_pattern(metric.name, "_total$", "") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_cpu_seconds_seconds$", "otelcol_process_cpu_seconds")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_memory_rss_bytes$", "otelcol_process_memory_rss_bytes")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_heap_alloc_bytes_bytes$",
            "otelcol_process_runtime_heap_alloc_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_total_alloc_bytes_bytes$",
            "otelcol_process_runtime_total_alloc_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_total_sys_memory_bytes_bytes$",
            "otelcol_process_runtime_total_sys_memory_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_fileconsumer_open_files$", "otelcol_fileconsumer_open_files_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_fileconsumer_reading_files$", "otelcol_fileconsumer_reading_files_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_ip_lookup_miss$", "otelcol_otelsvc_k8s_ip_lookup_miss_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_added$", "otelcol_otelsvc_k8s_pod_added_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_table_size_ratio$",
            "otelcol_otelsvc_k8s_pod_table_size_ratio") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_updated$", "otelcol_otelsvc_k8s_pod_updated_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_deleted$", "otelcol_otelsvc_k8s_pod_deleted_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_processor_filter_spans\\.filtered$",
            "otelcol_processor_filter_spans.filtered_ratio") where resource.attributes["service.name"]
            == "opentelemetry-collector"
        - context: resource
          statements:
          - set(attributes["k8s.pod.ip"], attributes["net.host.name"]) where attributes["service.name"]
            == "opentelemetry-collector"
          - delete_key(attributes, "service_name") where attributes["service.name"] ==
            "opentelemetry-collector"
        - context: datapoint
          statements:
          - delete_key(attributes, "service_name") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - delete_key(attributes, "otel_scope_name") where attributes["service.name"]
            == "opentelemetry-collector"
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
            max_recv_msg_size_mib: 20
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 30s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
    service:
      extensions:
      - health_check
      pipelines:
        logs:
          exporters:
          - debug
          processors:
          - memory_limiter
          receivers:
          - otlp
        metrics:
          exporters:
          - debug
          processors:
          - memory_limiter
          - transform/prometheus
          receivers:
          - spanmetrics
          - spanmetrics/db
          - prometheus
          - otlp
        metrics/compact:
          exporters:
          - coralogix
          processors:
          - memory_limiter
          - transform/compact_histogram
          - filter/drop_histogram
          - batch
          receivers:
          - spanmetrics/compact
        traces:
          exporters:
          - debug
          - spanmetrics
          - forward/db
          - forward/compact
          processors:
          - memory_limiter
          receivers:
          - otlp
        traces/compact:
          exporters:
          - spanmetrics/compact
          processors:
          - transform/compact
          - batch
          receivers:
          - forward/compact
        traces/db:
          exporters:
          - spanmetrics/db
          processors:
          - filter/db_spanmetrics
          - batch
          receivers:
          - forward/db
      telemetry:
        logs:
          encoding: json
        metrics:
          readers:
          - pull:
              exporter:
                prometheus:
                  host: ${env:MY_POD_IP}
                  port: 8888
