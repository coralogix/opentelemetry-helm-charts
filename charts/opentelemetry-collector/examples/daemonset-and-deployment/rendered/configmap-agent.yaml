---
# Source: opentelemetry-collector/templates/configmap-agent.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-opentelemetry-collector-agent
  namespace: default
  labels:
    helm.sh/chart: opentelemetry-collector-0.114.3
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "0.125.0"
    app.kubernetes.io/managed-by: Helm
    
data:
  relay: |
    connectors:
      spanmetrics:
        dimensions:
        - name: http.response.status_code
        - name: rpc.grpc.status_code
        - name: service.version
        metrics_expiration: 0
        metrics_flush_interval: 15s
        namespace: ""
    exporters:
      debug: {}
      otlp:
        endpoint: example-opentelemetry-collector:4317
        tls:
          insecure: true
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      metricstransform/kubeletstatscpu:
        transforms:
        - action: update
          include: container.cpu.usage
          new_name: container.cpu.utilization
        - action: update
          include: k8s.pod.cpu.usage
          new_name: k8s.pod.cpu.utilization
        - action: update
          include: k8s.node.cpu.usage
          new_name: k8s.node.cpu.utilization
      transform/prometheus:
        error_mode: ignore
        metric_statements:
        - context: metric
          statements:
          - replace_pattern(name, "_total$", "")
        - context: resource
          statements:
          - set(attributes["k8s.pod.ip"], attributes["net.host.name"]) where attributes["service.name"]
            == "opentelemetry-collector"
          - delete_key(attributes, "service_name") where attributes["service.name"] ==
            "opentelemetry-collector"
        - context: datapoint
          statements:
          - delete_key(attributes, "service_name") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - delete_key(attributes, "otel_scope_name") where attributes["service.name"]
            == "opentelemetry-collector"
      transform/spanmetrics:
        error_mode: silent
        trace_statements:
        - context: span
          statements:
          - set(attributes["http.response.status_code"], attributes["http.status_code"])
            where attributes["http.response.status_code"] == nil
    receivers:
      kubeletstats:
        auth_type: serviceAccount
        collect_all_network_interfaces:
          node: true
          pod: false
        collection_interval: 20s
        endpoint: ${env:K8S_NODE_IP}:10250
        insecure_skip_verify: true
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 30s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
    service:
      extensions:
      - health_check
      pipelines:
        logs:
          exporters:
          - otlp
          - debug
          processors:
          - memory_limiter
          - batch
          receivers:
          - otlp
        metrics:
          exporters:
          - otlp
          - debug
          processors:
          - memory_limiter
          - metricstransform/kubeletstatscpu
          - transform/prometheus
          - batch
          receivers:
          - otlp
          - kubeletstats
          - spanmetrics
          - prometheus
        traces:
          exporters:
          - otlp
          - debug
          - spanmetrics
          processors:
          - memory_limiter
          - transform/spanmetrics
          - batch
          receivers:
          - otlp
      telemetry:
        logs:
          encoding: json
        metrics:
          readers:
          - pull:
              exporter:
                prometheus:
                  host: ${env:MY_POD_IP}
                  port: 8888
