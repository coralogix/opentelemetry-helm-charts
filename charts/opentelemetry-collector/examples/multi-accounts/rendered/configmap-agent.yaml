---
# Source: opentelemetry-collector/templates/configmap-agent.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-opentelemetry-collector-agent
  namespace: default
  labels:
    helm.sh/chart: opentelemetry-collector-0.121.15
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "0.137.0"
    app.kubernetes.io/managed-by: Helm
    
data:
  relay: |
    exporters:
      coralogix:
        application_name: otel
        application_name_attributes:
        - k8s.namespace.name
        - service.namespace
        domain: coralogix.com
        logs:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        metrics:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        private_key: ${env:CORALOGIX_PRIVATE_KEY}
        profiles:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        retry_on_failure:
          enabled: true
          initial_interval: 2s
          max_elapsed_time: 120s
          max_interval: 20s
          multiplier: 2
        sending_queue:
          block_on_overflow: true
          enabled: true
          num_consumers: 5
          queue_size: 500
          sizer: requests
          wait_for_result: false
        subsystem_name: integration
        subsystem_name_attributes:
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - service.name
        timeout: 30s
        traces:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
      coralogix/coralogixsg_com:
        application_name: otel
        application_name_attributes:
        - k8s.namespace.name
        - service.namespace
        domain: coralogixsg.com
        logs:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        metrics:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        private_key: ${env:CORALOGIX_PRIVATE_KEY_AP2}
        profiles:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        retry_on_failure:
          enabled: true
          initial_interval: 2s
          max_elapsed_time: 120s
          max_interval: 20s
          multiplier: 2
        sending_queue:
          block_on_overflow: true
          enabled: true
          num_consumers: 5
          queue_size: 500
          sizer: requests
          wait_for_result: false
        subsystem_name: integration
        subsystem_name_attributes:
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - service.name
        timeout: 30s
        traces:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
      coralogix/myeu2:
        application_name: otel
        application_name_attributes:
        - k8s.namespace.name
        - service.namespace
        domain: eu2.coralogix.com
        logs:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        metrics:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        private_key: ${env:CORALOGIX_PRIVATE_KEY_EU2}
        profiles:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        retry_on_failure:
          enabled: true
          initial_interval: 2s
          max_elapsed_time: 120s
          max_interval: 20s
          multiplier: 2
        sending_queue:
          block_on_overflow: true
          enabled: true
          num_consumers: 5
          queue_size: 500
          sizer: requests
          wait_for_result: false
        subsystem_name: integration
        subsystem_name_attributes:
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - service.name
        timeout: 30s
        traces:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
      coralogix/private_coralogix_com:
        application_name: otel
        application_name_attributes:
        - k8s.namespace.name
        - service.namespace
        domain: private.coralogix.com
        logs:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        metrics:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        private_key: ${env:CORALOGIX_PRIVATE_KEY_US2}
        profiles:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
        retry_on_failure:
          enabled: true
          initial_interval: 2s
          max_elapsed_time: 120s
          max_interval: 20s
          multiplier: 2
        sending_queue:
          block_on_overflow: true
          enabled: true
          num_consumers: 5
          queue_size: 500
          sizer: requests
          wait_for_result: false
        subsystem_name: integration
        subsystem_name_attributes:
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - service.name
        timeout: 30s
        traces:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
      coralogix/resource_catalog:
        application_name: resource
        domain: coralogix.com
        logs:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
            x-coralogix-ingress: metadata-as-otlp-logs/v1
        private_key: ${CORALOGIX_PRIVATE_KEY}
        subsystem_name: catalog
        timeout: 30s
      coralogix/resource_catalog_coralogixsg_com:
        application_name: resource
        domain: coralogixsg.com
        logs:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
            x-coralogix-ingress: metadata-as-otlp-logs/v1
        private_key: ${env:CORALOGIX_PRIVATE_KEY_AP2}
        subsystem_name: catalog
        timeout: 30s
      coralogix/resource_catalog_eu2_coralogix_com:
        application_name: resource
        domain: eu2.coralogix.com
        logs:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
            x-coralogix-ingress: metadata-as-otlp-logs/v1
        private_key: ${env:CORALOGIX_PRIVATE_KEY_EU2}
        subsystem_name: catalog
        timeout: 30s
      coralogix/resource_catalog_private_coralogix_com:
        application_name: resource
        domain: private.coralogix.com
        logs:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/1.0
            x-coralogix-ingress: metadata-as-otlp-logs/v1
        private_key: ${env:CORALOGIX_PRIVATE_KEY_US2}
        subsystem_name: catalog
        timeout: 30s
      debug: {}
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    processors:
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resourcedetection/entity:
        detectors:
        - system
        - env
        override: false
        system:
          resource_attributes:
            host.cpu.cache.l2.size:
              enabled: true
            host.cpu.family:
              enabled: true
            host.cpu.model.id:
              enabled: true
            host.cpu.model.name:
              enabled: true
            host.cpu.stepping:
              enabled: true
            host.cpu.vendor.id:
              enabled: true
            host.id:
              enabled: true
            host.ip:
              enabled: true
            host.mac:
              enabled: true
            os.description:
              enabled: true
        timeout: 2s
      transform/entity-event:
        error_mode: silent
        log_statements:
        - context: log
          statements:
          - set(attributes["otel.entity.id"]["host.id"], resource.attributes["host.id"])
          - merge_maps(attributes, resource.attributes, "insert")
        - context: resource
          statements:
          - keep_keys(attributes, [""])
      transform/prometheus:
        error_mode: ignore
        metric_statements:
        - context: metric
          statements:
          - replace_pattern(metric.name, "_total$", "") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_cpu_seconds_seconds$", "otelcol_process_cpu_seconds")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_memory_rss_bytes$", "otelcol_process_memory_rss_bytes")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_heap_alloc_bytes_bytes$",
            "otelcol_process_runtime_heap_alloc_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_total_alloc_bytes_bytes$",
            "otelcol_process_runtime_total_alloc_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_total_sys_memory_bytes_bytes$",
            "otelcol_process_runtime_total_sys_memory_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_fileconsumer_open_files$", "otelcol_fileconsumer_open_files_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_fileconsumer_reading_files$", "otelcol_fileconsumer_reading_files_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_ip_lookup_miss$", "otelcol_otelsvc_k8s_ip_lookup_miss_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_added$", "otelcol_otelsvc_k8s_pod_added_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_table_size_ratio$",
            "otelcol_otelsvc_k8s_pod_table_size_ratio") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_updated$", "otelcol_otelsvc_k8s_pod_updated_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_deleted$", "otelcol_otelsvc_k8s_pod_deleted_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_processor_filter_spans\\.filtered$",
            "otelcol_processor_filter_spans.filtered_ratio") where resource.attributes["service.name"]
            == "opentelemetry-collector"
        - context: resource
          statements:
          - set(attributes["k8s.pod.ip"], attributes["net.host.name"]) where attributes["service.name"]
            == "opentelemetry-collector"
          - delete_key(attributes, "service_name") where attributes["service.name"] ==
            "opentelemetry-collector"
        - context: datapoint
          statements:
          - delete_key(attributes, "service_name") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - delete_key(attributes, "otel_scope_name") where attributes["service.name"]
            == "opentelemetry-collector"
    receivers:
      hostmetrics:
        collection_interval: 10s
        root_path: /hostfs
        scrapers:
          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
          disk: null
          filesystem:
            exclude_fs_types:
              fs_types:
              - autofs
              - binfmt_misc
              - bpf
              - cgroup2
              - configfs
              - debugfs
              - devpts
              - devtmpfs
              - fusectl
              - hugetlbfs
              - iso9660
              - mqueue
              - nsfs
              - overlay
              - proc
              - procfs
              - pstore
              - rpc_pipefs
              - securityfs
              - selinuxfs
              - squashfs
              - sysfs
              - tracefs
              match_type: strict
            exclude_mount_points:
              match_type: regexp
              mount_points:
              - /dev/*
              - /proc/*
              - /sys/*
              - /run/k3s/containerd/*
              - /run/containerd/runc/*
              - /var/lib/docker/*
              - /var/lib/kubelet/*
              - /snap/*
          load: null
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
          network: null
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
            max_recv_msg_size_mib: 20
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 30s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
    service:
      extensions:
      - health_check
      pipelines:
        logs:
          exporters:
          - debug
          - coralogix
          - coralogix/coralogixsg_com
          - coralogix/myeu2
          - coralogix/private_coralogix_com
          processors:
          - memory_limiter
          receivers:
          - otlp
        logs/resource_catalog:
          exporters:
          - coralogix/resource_catalog
          - coralogix/resource_catalog_eu2_coralogix_com
          - coralogix/resource_catalog_coralogixsg_com
          - coralogix/resource_catalog_private_coralogix_com
          processors:
          - memory_limiter
          - resource/metadata
          - resourcedetection/entity
          - resourcedetection/region
          - transform/entity-event
          receivers:
          - hostmetrics
        metrics:
          exporters:
          - debug
          - coralogix
          - coralogix/coralogixsg_com
          - coralogix/myeu2
          - coralogix/private_coralogix_com
          processors:
          - memory_limiter
          - transform/prometheus
          receivers:
          - hostmetrics
          - prometheus
          - otlp
        traces:
          exporters:
          - debug
          - coralogix
          - coralogix/coralogixsg_com
          - coralogix/myeu2
          - coralogix/private_coralogix_com
          processors:
          - memory_limiter
          receivers:
          - otlp
      telemetry:
        logs:
          encoding: json
        metrics:
          readers:
          - pull:
              exporter:
                prometheus:
                  host: ${env:MY_POD_IP}
                  port: 8888
