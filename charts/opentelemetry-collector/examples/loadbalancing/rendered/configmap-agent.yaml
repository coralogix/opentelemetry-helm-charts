---
# Source: opentelemetry-collector/templates/configmap-agent.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-opentelemetry-collector-agent
  namespace: default
  labels:
    helm.sh/chart: opentelemetry-collector-0.120.4
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "0.136.0"
    app.kubernetes.io/managed-by: Helm
    
data:
  relay: |
    connectors:
      forward/sampled: {}
    exporters:
      debug: {}
      loadbalancing:
        protocol:
          otlp:
            tls:
              insecure: true
        resolver:
          dns:
            hostname: localhost
        routing_key: service
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    processors:
      batch:
        send_batch_max_size: 2048
        send_batch_size: 1024
        timeout: 1s
      k8sattributes/profiles:
        extract:
          labels:
          - from: pod
            key: app.kubernetes.io/name
            tag_name: k8s.label.name
          - from: pod
            key: app.kubernetes.io/instance
            tag_name: k8s.label.instance
          metadata:
          - k8s.namespace.name
          - k8s.replicaset.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.deployment.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.pod.name
          - k8s.node.name
          - container.id
          otel_annotations: true
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: container.id
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      probabilistic_sampler:
        mode: proportional
        sampling_percentage: 10
      transform/profiles:
        profile_statements:
        - set(resource.attributes["service.name"], resource.attributes["k8s.label.instance"])
          where resource.attributes["service.name"] == nil and resource.attributes["k8s.label.instance"]
          != nil
        - set(resource.attributes["service.name"], resource.attributes["k8s.label.name"])
          where resource.attributes["service.name"] == nil and resource.attributes["k8s.label.name"]
          != nil
        - set(resource.attributes["service.name"], resource.attributes["k8s.deployment.name"])
          where resource.attributes["service.name"] == nil and resource.attributes["k8s.deployment.name"]
          != nil
        - set(resource.attributes["service.name"], resource.attributes["k8s.replicaset.name"])
          where resource.attributes["service.name"] == nil and resource.attributes["k8s.replicaset.name"]
          != nil
        - set(resource.attributes["service.name"], resource.attributes["k8s.statefulset.name"])
          where resource.attributes["service.name"] == nil and resource.attributes["k8s.statefulset.name"]
          != nil
        - set(resource.attributes["service.name"], resource.attributes["k8s.daemonset.name"])
          where resource.attributes["service.name"] == nil and resource.attributes["k8s.daemonset.name"]
          != nil
        - set(resource.attributes["service.name"], resource.attributes["k8s.cronjob.name"])
          where resource.attributes["service.name"] == nil and resource.attributes["k8s.cronjob.name"]
          != nil
        - set(resource.attributes["service.name"], resource.attributes["k8s.job.name"])
          where resource.attributes["service.name"] == nil and resource.attributes["k8s.job.name"]
          != nil
        - set(resource.attributes["service.name"], resource.attributes["k8s.pod.name"])
          where resource.attributes["service.name"] == nil and resource.attributes["k8s.pod.name"]
          != nil
        - set(resource.attributes["service.name"], resource.attributes["k8s.container.name"])
          where resource.attributes["service.name"] == nil and resource.attributes["k8s.container.name"]
          != nil
      transform/prometheus:
        error_mode: ignore
        metric_statements:
        - context: metric
          statements:
          - replace_pattern(metric.name, "_total$", "") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_cpu_seconds_seconds$", "otelcol_process_cpu_seconds")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_memory_rss_bytes$", "otelcol_process_memory_rss_bytes")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_heap_alloc_bytes_bytes$",
            "otelcol_process_runtime_heap_alloc_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_total_alloc_bytes_bytes$",
            "otelcol_process_runtime_total_alloc_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_total_sys_memory_bytes_bytes$",
            "otelcol_process_runtime_total_sys_memory_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_fileconsumer_open_files$", "otelcol_fileconsumer_open_files_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_fileconsumer_reading_files$", "otelcol_fileconsumer_reading_files_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_ip_lookup_miss$", "otelcol_otelsvc_k8s_ip_lookup_miss_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_added$", "otelcol_otelsvc_k8s_pod_added_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_table_size_ratio$",
            "otelcol_otelsvc_k8s_pod_table_size_ratio") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_updated$", "otelcol_otelsvc_k8s_pod_updated_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_deleted$", "otelcol_otelsvc_k8s_pod_deleted_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_processor_filter_spans\\.filtered$",
            "otelcol_processor_filter_spans.filtered_ratio") where resource.attributes["service.name"]
            == "opentelemetry-collector"
        - context: resource
          statements:
          - set(attributes["k8s.pod.ip"], attributes["net.host.name"]) where attributes["service.name"]
            == "opentelemetry-collector"
          - delete_key(attributes, "service_name") where attributes["service.name"] ==
            "opentelemetry-collector"
        - context: datapoint
          statements:
          - delete_key(attributes, "service_name") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - delete_key(attributes, "otel_scope_name") where attributes["service.name"]
            == "opentelemetry-collector"
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
            max_recv_msg_size_mib: 20
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 30s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
    service:
      extensions:
      - health_check
      pipelines:
        logs:
          exporters:
          - debug
          processors:
          - memory_limiter
          - batch
          receivers:
          - otlp
        metrics:
          exporters:
          - debug
          - loadbalancing
          processors:
          - memory_limiter
          - transform/prometheus
          - batch
          receivers:
          - prometheus
          - otlp
        profiles:
          exporters:
          - loadbalancing
          processors:
          - memory_limiter
          - k8sattributes/profiles
          - transform/profiles
          receivers:
          - otlp
        traces:
          exporters:
          - debug
          - forward/sampled
          processors:
          - memory_limiter
          - batch
          receivers:
          - otlp
        traces/sampled:
          exporters:
          - loadbalancing
          processors:
          - batch
          - probabilistic_sampler
          receivers:
          - forward/sampled
      telemetry:
        logs:
          encoding: json
        metrics:
          readers:
          - pull:
              exporter:
                prometheus:
                  host: ${env:MY_POD_IP}
                  port: 8888
