---
# Source: opentelemetry-collector/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-opentelemetry-collector
  namespace: default
  labels:
    helm.sh/chart: opentelemetry-collector-0.122.0
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "0.137.0"
    app.kubernetes.io/managed-by: Helm
    
data:
  relay: |
    exporters:
      coralogix/resource_catalog:
        application_name: resource
        domain: ""
        logs:
          headers:
            X-Coralogix-Distribution: helm-otel-integration/
            x-coralogix-ingress: metadata-as-otlp-logs/v1
        private_key: ${CORALOGIX_PRIVATE_KEY}
        subsystem_name: catalog
        timeout: 30s
      debug: {}
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    processors:
      filter/workflow:
        error_mode: silent
        logs:
          log_record:
          - body["object"]["kind"] == "Pod" and not IsMatch(String(body["object"]["metadata"]["ownerReferences"]),
            ".*StatefulSet.*|.*ReplicaSet.*|.*Job.*|.*DaemonSet.*")
          - body["kind"] == "Pod" and not IsMatch(String(body["metadata"]["ownerReferences"]),
            ".*StatefulSet.*|.*ReplicaSet.*|.*Job.*|.*DaemonSet.*")
      filter/workflow-custom:
        error_mode: silent
        logs:
          log_record:
          - body["kind"] == "Service"
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resourcedetection/resource_catalog:
        azure:
          resource_attributes:
            azure.resourcegroup.name:
              enabled: false
            azure.vm.name:
              enabled: false
            azure.vm.scaleset.name:
              enabled: false
            azure.vm.size:
              enabled: false
            host.id:
              enabled: false
            host.name:
              enabled: false
        detectors:
        - eks
        - aks
        - gcp
        - ec2
        - azure
        ec2:
          resource_attributes:
            host.id:
              enabled: false
            host.image.id:
              enabled: false
            host.name:
              enabled: false
            host.type:
              enabled: false
        gcp:
          resource_attributes:
            host.id:
              enabled: false
            host.name:
              enabled: false
            host.type:
              enabled: false
            k8s.cluster.name:
              enabled: false
        override: true
        timeout: 2s
      transform/entity-event:
        error_mode: silent
        log_statements:
        - context: log
          statements:
          - set(attributes["otel.entity.interval"], Milliseconds(Duration("1h")))
      transform/kubernetes_transform:
        error_mode: silent
        log_statements:
        - replace_all_patterns(log.attributes, "value", "^(?s).{257,}$", "REDACTED")
      transform/prometheus:
        error_mode: ignore
        metric_statements:
        - context: metric
          statements:
          - replace_pattern(metric.name, "_total$", "") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_cpu_seconds_seconds$", "otelcol_process_cpu_seconds")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_memory_rss_bytes$", "otelcol_process_memory_rss_bytes")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_heap_alloc_bytes_bytes$",
            "otelcol_process_runtime_heap_alloc_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_total_alloc_bytes_bytes$",
            "otelcol_process_runtime_total_alloc_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_process_runtime_total_sys_memory_bytes_bytes$",
            "otelcol_process_runtime_total_sys_memory_bytes") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_fileconsumer_open_files$", "otelcol_fileconsumer_open_files_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_fileconsumer_reading_files$", "otelcol_fileconsumer_reading_files_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_ip_lookup_miss$", "otelcol_otelsvc_k8s_ip_lookup_miss_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_added$", "otelcol_otelsvc_k8s_pod_added_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_table_size_ratio$",
            "otelcol_otelsvc_k8s_pod_table_size_ratio") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_updated$", "otelcol_otelsvc_k8s_pod_updated_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_otelsvc_k8s_pod_deleted$", "otelcol_otelsvc_k8s_pod_deleted_ratio")
            where resource.attributes["service.name"] == "opentelemetry-collector"
          - replace_pattern(metric.name, "^otelcol_processor_filter_spans\\.filtered$",
            "otelcol_processor_filter_spans.filtered_ratio") where resource.attributes["service.name"]
            == "opentelemetry-collector"
        - context: resource
          statements:
          - set(attributes["k8s.pod.ip"], attributes["net.host.name"]) where attributes["service.name"]
            == "opentelemetry-collector"
          - delete_key(attributes, "service_name") where attributes["service.name"] ==
            "opentelemetry-collector"
        - context: datapoint
          statements:
          - delete_key(attributes, "service_name") where resource.attributes["service.name"]
            == "opentelemetry-collector"
          - delete_key(attributes, "otel_scope_name") where attributes["service.name"]
            == "opentelemetry-collector"
      transform/remove_managed_fields:
        error_mode: silent
        log_statements:
        - context: log
          statements:
          - delete_key(body["object"]["metadata"], "managedFields")
          - delete_key(body["metadata"], "managedFields")
    receivers:
      k8sobjects/resource_catalog:
        objects:
        - group: ""
          mode: watch
          name: namespaces
        - group: ""
          mode: watch
          name: nodes
        - group: ""
          mode: watch
          name: persistentvolumeclaims
        - group: ""
          mode: watch
          name: persistentvolumes
        - group: ""
          mode: watch
          name: pods
        - group: apps
          mode: watch
          name: daemonsets
        - group: apps
          mode: watch
          name: deployments
        - group: apps
          mode: watch
          name: replicasets
        - group: apps
          mode: watch
          name: statefulsets
        - group: autoscaling
          mode: watch
          name: horizontalpodautoscalers
        - group: batch
          mode: watch
          name: cronjobs
        - group: batch
          mode: watch
          name: jobs
        - group: extensions
          mode: watch
          name: ingresses
        - group: networking.k8s.io
          mode: watch
          name: ingresses
        - group: policy
          mode: watch
          name: poddisruptionbudgets
        - group: rbac.authorization.k8s.io
          mode: watch
          name: clusterrolebindings
        - group: rbac.authorization.k8s.io
          mode: watch
          name: clusterroles
        - group: rbac.authorization.k8s.io
          mode: watch
          name: rolebindings
        - group: rbac.authorization.k8s.io
          mode: watch
          name: roles
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
            max_recv_msg_size_mib: 20
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 30s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
    service:
      extensions:
      - health_check
      pipelines:
        logs:
          exporters:
          - debug
          processors:
          - memory_limiter
          receivers:
          - otlp
        logs/resource_catalog:
          exporters:
          - coralogix/resource_catalog
          processors:
          - memory_limiter
          - resourcedetection/resource_catalog
          - transform/entity-event
          - transform/remove_managed_fields
          - filter/workflow
          - filter/workflow-custom
          - resource/metadata
          - transform/kubernetes_transform
          - batch
          receivers:
          - k8sobjects/resource_catalog
        metrics:
          exporters:
          - debug
          processors:
          - memory_limiter
          - transform/prometheus
          receivers:
          - prometheus
          - otlp
        traces:
          exporters:
          - debug
          processors:
          - memory_limiter
          receivers:
          - otlp
      telemetry:
        logs:
          encoding: json
        metrics:
          readers:
          - pull:
              exporter:
                prometheus:
                  host: ${env:MY_POD_IP}
                  port: 8888
